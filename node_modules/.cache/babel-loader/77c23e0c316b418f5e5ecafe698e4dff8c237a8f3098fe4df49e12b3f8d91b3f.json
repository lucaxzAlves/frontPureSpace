{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lukga\\\\Documents\\\\javaScript\\\\css-html\\\\PureSpaceReact\\\\my-app\\\\front-end\\\\src\\\\components\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chart({\n  id,\n  dataKey,\n  date\n}) {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      data: []\n    }]\n  });\n\n  // Função para buscar dados da API\n  const fetchData = async () => {\n    const response = await fetch(`http://localhost:3000/api/medias${date}/${id}?timestamp=${Date.now()}`);\n    const dataMedia = await response.json();\n    if (!Array.isArray(dataMedia)) {\n      console.error('API NÃO RETORNOU ARRAY:', dataMedia);\n      return; // Ou trata isso de outra forma (exibir erro na tela)\n    }\n    const novasLabels = dataMedia.map(d => new Date(d.timestamp).toLocaleDateString('pt-BR', {\n      day: 'numeric',\n      month: 'short'\n    }).replace(' de ', ' '));\n    const novosDados = dataMedia.map(d => parseFloat(d[dataKey]));\n    setChartData({\n      labels: novasLabels,\n      datasets: [{\n        data: novosDados\n      }]\n    });\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(() => {\n      fetchData();\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            ticks: {\n              callback: function (value) {\n                return value + '°C';\n              }\n            }\n          },\n          x: {\n            display: true\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return context.raw + '°C';\n              }\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Chart, \"iJpGuM/w1wKE8SsAVjT9hHT2qXM=\");\n_c = Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","Chart","id","dataKey","date","_s","chartData","setChartData","labels","datasets","data","fetchData","response","fetch","Date","now","dataMedia","json","Array","isArray","console","error","novasLabels","map","d","timestamp","toLocaleDateString","day","month","replace","novosDados","parseFloat","interval","setInterval","clearInterval","children","options","responsive","maintainAspectRatio","scales","y","ticks","callback","value","x","display","plugins","legend","tooltip","callbacks","label","context","raw","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lukga/Documents/javaScript/css-html/PureSpaceReact/my-app/front-end/src/components/Chart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nexport default function Chart({ id, dataKey, date }) {\r\n\r\n \r\n\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [{\r\n      data: [],\r\n    }]\r\n  });\r\n\r\n  // Função para buscar dados da API\r\n  const fetchData = async () => {\r\n    const response = await fetch(`http://localhost:3000/api/medias${date}/${id}?timestamp=${Date.now()}`);\r\n    const dataMedia = await response.json();\r\n\r\n    if (!Array.isArray(dataMedia)) {\r\n  console.error('API NÃO RETORNOU ARRAY:', dataMedia);\r\n  return; // Ou trata isso de outra forma (exibir erro na tela)\r\n}\r\n\r\nconst novasLabels = dataMedia.map(d =>\r\n  new Date(d.timestamp).toLocaleDateString('pt-BR', {\r\n    day: 'numeric',\r\n    month: 'short'\r\n  }).replace(' de ', ' ')\r\n);\r\n\r\nconst novosDados = dataMedia.map(d => parseFloat(d[dataKey]));\r\n\r\n    setChartData({\r\n      labels: novasLabels,\r\n      datasets: [{\r\n        data: novosDados\r\n      }]\r\n    });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData(); \r\n\r\n    const interval = setInterval(() => {\r\n      fetchData();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval); \r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n     maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              ticks: {\r\n                callback: function(value) {\r\n                  return value + '°C';\r\n                }\r\n              }\r\n            },\r\n            x: { display: true }\r\n          },\r\n          plugins: {\r\n            legend: { display: false },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return context.raw + '°C';\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}